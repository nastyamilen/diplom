import customtkinter as ctk
from PIL import Image, ImageTk
import threading
from tkinter import messagebox, Toplevel
from ais_module import AISClassifier, recognize_text_from_image, X_train, X_test, y_train, y_test, vectorizer, class_names, ais, svd

ctk.set_appearance_mode("light")
ctk.set_default_color_theme("blue")

class ImagePreview(Toplevel):
    def __init__(self, parent, image_path):
        super().__init__(parent)
        self.title("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        self.attributes('-topmost', True)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –æ–∫–Ω–∞
        self._drag_data = {"x": 0, "y": 0, "item": None}
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–æ–ª–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ
        img = Image.open(image_path)
        img_tk = ImageTk.PhotoImage(img)
        
        # –°–æ–∑–¥–∞–µ–º canvas —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.canvas = ctk.CTkCanvas(self, width=img.width, height=img.height)
        self.canvas.pack()
        self.canvas.create_image(0, 0, anchor="nw", image=img_tk)
        self.canvas.image = img_tk  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.geometry(f"{img.width}x{img.height}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.protocol("WM_DELETE_WINDOW", self.on_closing)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –º—ã—à–∏ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        self.bind("<Button-1>", self.start_drag)
        self.bind("<B1-Motion>", self.drag)
        self.bind("<ButtonRelease-1>", self.stop_drag)
        
    def start_drag(self, event):
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        self._drag_data["x"] = event.x
        self._drag_data["y"] = event.y
        
    def drag(self, event):
        # –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ
        dx = event.x - self._drag_data["x"]
        dy = event.y - self._drag_data["y"]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –æ–∫–Ω–∞
        x = self.winfo_x() + dx
        y = self.winfo_y() + dy
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –æ–∫–Ω–æ
        self.geometry(f"+{x}+{y}")
        
    def stop_drag(self, event):
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        self._drag_data["x"] = 0
        self._drag_data["y"] = 0
        
    def on_closing(self):
        self.master.preview_window = None
        self.destroy()

class AIS_GUI(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("AIS –¢–µ–∫—Å—Ç–æ–≤–∞—è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è")
        self.geometry("1400x900")
        self.minsize(1100, 700)
        self.image_path = None
        self.ocr_text = ""
        self.preview_window = None
        self.preview_timer = None

        # –û—Å–Ω–æ–≤–Ω–æ–π split-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ctk.CTkFrame(self, corner_radius=20, fg_color="#f4f6fa")
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)

        # –õ–µ–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ ‚Äî –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ
        left_panel = ctk.CTkFrame(main_frame, width=600, corner_radius=18, fg_color="#e3eaf2")
        left_panel.pack(side="left", fill="both", expand=True, padx=(0, 10), pady=10)
        ctk.CTkLabel(left_panel, text="–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", font=("Arial", 18, "bold"), text_color="#1e293b").pack(pady=(20, 10))
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è canvas —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
        canvas_frame = ctk.CTkFrame(left_panel, fg_color="transparent")
        canvas_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        self.image_canvas = ctk.CTkCanvas(canvas_frame, width=560, height=700, bg="white", 
                                        highlightthickness=2, highlightbackground="#b0b0b0")
        self.image_canvas.pack(fill="both", expand=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        hint_label = ctk.CTkLabel(canvas_frame, text="–ù–∞–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å–æ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –ø–æ–ª–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ", 
                                 font=("Arial", 12), text_color="#666666")
        hint_label.pack(pady=(5, 0))
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –º—ã—à–∏
        self.image_canvas.bind("<Enter>", self.show_full_preview)
        self.image_canvas.bind("<Leave>", self.hide_full_preview)

        # –ü—Ä–∞–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        right_panel = ctk.CTkFrame(main_frame, corner_radius=18, fg_color="#ffffff")
        right_panel.pack(side="right", fill="both", expand=True, padx=10, pady=10)
        ctk.CTkLabel(right_panel, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è", font=("Arial", 20, "bold"), text_color="#1e293b").pack(anchor="w", padx=20, pady=(20, 0))
        # –†–∞–º–∫–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.ocr_frame = ctk.CTkFrame(right_panel, fg_color="#f9fafb", border_width=3, border_color="#3b82f6", corner_radius=14)
        self.ocr_frame.pack(fill="both", padx=20, pady=(10, 18), expand=True)
        self.ocr_conf_label = ctk.CTkLabel(self.ocr_frame, text="", font=("Arial", 20, "bold"), text_color="#e11d48")
        self.ocr_conf_label.pack(anchor="w", padx=16, pady=(16, 0))
        self.ocr_class_label = ctk.CTkLabel(self.ocr_frame, text="", font=("Arial", 18, "bold"), text_color="#2563eb")
        self.ocr_class_label.pack(anchor="w", padx=16, pady=(0, 10))
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        self.ocr_textbox = ctk.CTkTextbox(self.ocr_frame, font=("Arial", 18), wrap="word", width=1, height=1)
        self.ocr_textbox.pack(fill="both", padx=16, pady=(0, 16), expand=True)
        self.ocr_textbox.configure(state="normal")
        self.ocr_textbox.delete("1.0", "end")
        self.ocr_textbox.insert("end", "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AIS –¢–µ–∫—Å—Ç–æ–≤–∞—è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è!\n\n"
            "1. –û–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å\n"
            "2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
            "3. –†–∞—Å–ø–æ–∑–Ω–∞–π—Ç–µ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç\n\n"
            "–ú–æ–¥–µ–ª—å —Ä–∞–∑–ª–∏—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
            + "\n".join(f"- {name}" for name in class_names)
            + "\n\n–ù–∞–∂–º–∏—Ç–µ '–û–±—É—á–∏—Ç—å AIS' –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
        self.ocr_textbox.configure(state="disabled")

        # –ö–Ω–æ–ø–∫–∏ –≤ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏
        btn_panel1 = ctk.CTkFrame(right_panel, fg_color="#ffffff")
        btn_panel1.pack(fill="x", padx=20, pady=(0, 0))
        self._add_icon_button(btn_panel1, "–û–±—É—á–∏—Ç—å AIS", "üß¨", self.train_ais)
        self._add_icon_button(btn_panel1, "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "üñºÔ∏è", self.load_image)
        self._add_icon_button(btn_panel1, "–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç", "üîç", self.run_ocr)
        btn_panel2 = ctk.CTkFrame(right_panel, fg_color="#ffffff")
        btn_panel2.pack(fill="x", padx=20, pady=(0, 10))
        self._add_icon_button(btn_panel2, "–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", "üìë", self.classify_recognized_text)
        self._add_icon_button(btn_panel2, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–¥–µ–ª—å", "üíæ", self.save_model)
        self._add_icon_button(btn_panel2, "–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å", "üìÇ", self.load_model)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä
        self.progress_var = ctk.DoubleVar()
        self.progress_bar = ctk.CTkProgressBar(right_panel, variable=self.progress_var, width=600, height=18)
        self.progress_bar.pack(fill="x", padx=20, pady=5)
        self.status_var = ctk.StringVar()
        self.status_bar = ctk.CTkLabel(right_panel, textvariable=self.status_var, anchor="w", font=("Arial", 12), fg_color="#e6e6e6", text_color="#333")
        self.status_bar.pack(fill="x", padx=20, pady=(0, 10))

    def _add_icon_button(self, parent, text, icon, command):
        btn = ctk.CTkButton(parent, text=f"{icon}  {text}", command=command, height=48, width=220,
                            font=("Arial", 15, "bold"), fg_color="#3b82f6", hover_color="#2563eb",
                            text_color="#fff", corner_radius=12)
        btn.pack(side="left", padx=8, pady=8, expand=True)

    def show_full_preview(self, event):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏–º–µ–Ω–Ω–æ –Ω–∞ canvas —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        if event.widget != self.image_canvas:
            return
            
        if self.preview_timer:
            self.after_cancel(self.preview_timer)
            self.preview_timer = None
            
        if self.image_path and not self.preview_window:
            self.preview_window = ImagePreview(self, self.image_path)
            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ Leave —Ç–æ–ª—å–∫–æ –∫ canvas –≤ –æ–∫–Ω–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            self.preview_window.canvas.bind("<Leave>", self.hide_full_preview)

    def hide_full_preview(self, event=None):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        if not self.preview_window:
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏–º–µ–Ω–Ω–æ –Ω–∞ canvas –≤ –æ–∫–Ω–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        if event and hasattr(event, 'widget') and event.widget != self.preview_window.canvas:
            return
            
        if self.preview_window:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
            self.preview_timer = self.after(100, self._close_preview)

    def _close_preview(self):
        if self.preview_window:
            try:
                self.preview_window.destroy()
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –æ–∫–Ω–∞
            finally:
                self.preview_window = None
        self.preview_timer = None

    def run_ocr(self):
        if not self.image_path:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")
            return
        self.update_status("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞...")
        self.progress_var.set(0)
        def ocr_process():
            text, confidence = recognize_text_from_image(self.image_path)
            self.ocr_text = text.strip()
            self.progress_var.set(100)
            self.ocr_conf_label.configure(text=f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2%}")
            self.ocr_textbox.configure(state="normal")
            self.ocr_textbox.delete("1.0", "end")
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–±–∑–∞—Ü–µ–≤
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            lines = text.split('\n')
            formatted_lines = []
            for line in lines:
                line = line.strip()
                if line:  # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è
                    formatted_lines.append(line)
                else:  # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è, –¥–æ–±–∞–≤–ª—è–µ–º –¥–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–Ω–æ—Å
                    formatted_lines.append('')
                    formatted_lines.append('')
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            formatted_text = '\n'.join(formatted_lines)
            
            self.ocr_textbox.insert("end", formatted_text)
            self.ocr_textbox.configure(state="disabled")
            self.ocr_class_label.configure(text="")
            self.update_status(f"–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2%})")
        threading.Thread(target=ocr_process).start()

    def classify_recognized_text(self):
        try:
            text = self.ocr_text.strip()
            if not text:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–π—Ç–µ —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!")
                return
            self.update_status("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞...")
            self.progress_var.set(0)
            text = text.lower()
            text = ' '.join(text.split())
            text_vector = vectorizer.transform([text])
            text_vector = svd.transform(text_vector)
            predictions, confidences = ais.predict(text_vector)
            if predictions is None or len(predictions) == 0:
                self.ocr_class_label.configure(text="‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç.")
                return
            prediction = int(predictions[0])
            if prediction < 0 or prediction >= len(class_names):
                self.ocr_class_label.configure(text="‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∞—Å—Å.")
                return
            label = class_names[prediction]
            confidence = float(confidences[0])
            self.ocr_class_label.configure(text=f"–ö–ª–∞—Å—Å: {label} ")
            self.update_status("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            self.progress_var.set(100)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")
            self.update_status("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            self.progress_var.set(0)

    def load_image(self):
        path = ctk.filedialog.askopenfilename(filetypes=[("Image files", "*.jpg *.png *.jpeg")])
        if path:
            self.image_path = path
            img = Image.open(path)
            max_width = 560
            max_height = 700
            ratio = min(max_width/img.size[0], max_height/img.size[1])
            new_size = (int(img.size[0] * ratio), int(img.size[1] * ratio))
            img = img.resize(new_size, Image.Resampling.LANCZOS)
            img_tk = ImageTk.PhotoImage(img)
            self.image_canvas.delete("all")
            self.image_canvas.create_image(0, 0, anchor=ctk.NW, image=img_tk)
            self.image_canvas.image = img_tk
            self.image_canvas.configure(scrollregion=self.image_canvas.bbox("all"))
            self.update_status(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {path}")

    def train_ais(self):
        def training():
            try:
                # –û—á–∏—â–∞–µ–º –≤—Å–µ –º–µ—Ç–∫–∏
                self.ocr_conf_label.configure(text="")
                self.ocr_class_label.configure(text="")
                self.ocr_textbox.configure(state="normal")
                self.ocr_textbox.delete("1.0", "end")
                self.ocr_textbox.insert("end", "‚è≥ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
                self.ocr_textbox.configure(state="disabled")
                self.progress_var.set(0)
                
                # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
                ais.fit(X_train, y_train, class_names=class_names)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
                self.ocr_textbox.configure(state="normal")
                self.ocr_textbox.delete("1.0", "end")
                self.ocr_textbox.insert("end", "‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
                    "–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞ –Ω–∞ –¥–∞—Ç–∞—Å–µ—Ç–µ '20 Newsgroups'.\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç.")
                self.ocr_textbox.configure(state="disabled")
                self.update_status("–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                self.progress_var.set(100)
            except Exception as e:
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ
                self.ocr_textbox.configure(state="normal")
                self.ocr_textbox.delete("1.0", "end")
                self.ocr_textbox.insert("end", f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {str(e)}")
                self.ocr_textbox.configure(state="disabled")
                self.update_status("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏")
                self.progress_var.set(0)
        threading.Thread(target=training).start()

    def show_model_dialog(self):
        dialog = ctk.CTkToplevel(self)
        dialog.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—å—é")
        dialog.geometry("300x150")
        ctk.CTkButton(dialog, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–¥–µ–ª—å", command=lambda: [self.save_model(), dialog.destroy()]).pack(pady=10)
        ctk.CTkButton(dialog, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å", command=lambda: [self.load_model(), dialog.destroy()]).pack(pady=10)
        ctk.CTkButton(dialog, text="–û—Ç–º–µ–Ω–∞", command=dialog.destroy).pack(pady=10)

    def save_model(self):
        try:
            path = ctk.filedialog.asksaveasfilename(defaultextension=".pkl", filetypes=[("Pickle files", "*.pkl")])
            if path:
                ais.save(path)
                self.ocr_text_label.configure(text=f"‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {path}")
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {str(e)}")

    def load_model(self):
        try:
            path = ctk.filedialog.askopenfilename(filetypes=[("Pickle files", "*.pkl")])
            if path:
                ais.load(path)
                self.ocr_textbox.configure(state="normal")
                self.ocr_textbox.delete("1.0", "end")
                self.ocr_textbox.insert("end", f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑: {path}")
                self.ocr_textbox.configure(state="disabled")
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {str(e)}")

    def update_status(self, message):
        self.status_var.set(message)
        self.update_idletasks()

if __name__ == "__main__":
    app = AIS_GUI()
    app.mainloop()
